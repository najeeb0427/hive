import org.apache.spark.sql.types.StructType
import sqlContext.implicits._
import org.apache.spark.sql.Row
val outputSchema = new StructType().add("entity_id","string").add("basin","string").add("well_type","string").add("quarter","string").add("prod_date","string").add("lateral_length","string").add("days","string").add("liq","string").add("gas","string").add("wtr","string").add("well_name","string").add("total_prod","string").add("daily_oil_bbld","string").add("daily_gas_mcfd","string").add("daily_gas_boed","string").add("oil_mix_monthly","string").add("gor_monthly","string").add("water_cut_monthly","string").add("prod_type","string").add("state","string").add("api_no","string").add("county","string").add("curr_oper_name","string").add("total_depth","string").add("latitude","string").add("longitude","string").add("first_prod_date","string").add("formation","string").add("normalized_month","string").add("reported_month","string").add("daily_total_boed","string").add("reported_cumulativeoil_bbls","string").add("reported_cumulativegas_mcf","string").add("reported_cumulativewtr","string").add("reported_cumulativetotal_boed","string").add("reported_cumulative_oilmix","string").add("reported_cumulative_gor","string").add("reported_cumulative_wtrcut","string").add("reported_lateral_adj_cumulative_oil_bbls_1000ft","string").add("reported_lateral_adj_cumulative_gas_mcf_1000ft","string").add("reported_lateral_adj_cumulative_total_boe_1000ft","string").add("normalized_cumulativeoil_bbls","string").add("normalized_cumulativegas_mcf","string").add("normalized_cumulativewtr","string").add("normalized_cumulativetotal_boed","string").add("normalized_cumulative_oilmix","string").add("normalized_cumulative_gor","string").add("normalized_cumulative_wtrcut","string").add("normalized_lateral_adj_cumulative_oil_bbls_1000ft","string").add("normalized_lateral_adj_cumulative_gas_mcf_1000ft","string").add("normalized_lateral_adj_cumulative_total_boe_1000ft","string")
val fields = outputSchema.fields.map(x => x.name)

val df = sqlContext.sql("select * from hdpi_production")
val rowrdd = df.rdd.map{y => {
val outputMap = scala.collection.mutable.HashMap.empty[String,String]
outputMap += ("entity_id" -> y.getString(0))
outputMap += ("basin" -> y.getString(1))
outputMap += ("well_type" -> y.getString(2))
outputMap += ("quarter" -> y.getString(3))
outputMap += ("prod_date" -> y.getString(4))
outputMap += ("lateral_length" -> y.getString(5))
outputMap += ("days" -> y.getString(6))
outputMap += ("liq" -> y.getString(7))
outputMap += ("gas" -> y.getString(8))
outputMap += ("wtr" -> y.getString(9))
outputMap += ("well_name" -> y.getString(10))
outputMap += ("total_prod" -> y.getString(11))
outputMap += ("daily_oil_bbld" -> y.getString(12))
outputMap += ("daily_oil_mcfd" -> y.getString(13))
outputMap += ("daily_gas_boed" -> y.getString(14))
outputMap += ("oil_mix_monthly" -> y.getString(15))
outputMap += ("gor_monthly" -> y.getString(16))
outputMap += ("water_cut_monthly" -> y.getString(17))
outputMap += ("prod_type" -> y.getString(18))
outputMap += ("state" -> y.getString(19))
outputMap += ("api_no" -> y.getString(20))
outputMap += ("county" -> y.getString(21))
outputMap += ("curr_oper_name" -> y.getString(22))
outputMap += ("total_depth" -> y.getString(23))
outputMap += ("latitude" -> y.getString(24))
outputMap += ("longitude" -> y.getString(25))
outputMap += ("first_prod_date" -> y.getString(26))
outputMap += ("formation" -> y.getString(27))
//outputMap += ("normalized_month" -> y.getInt(29).toString)
//outputMap += ("reported_month" -> y.getInt(30).toString)
if(outputMap.get("total_prod").get.toDouble>15000 || outputMap.get("total_prod").get.toDouble > (peakProduction*0.7) || normalized_indicator){
   normalized_month = normalized_month + 1;
      normalized_indicator = true
         outputMap += ("normalized_month" -> normalized_month.toString)
	 }
	 reported_month=reported_month+1
	 outputMap += ("reported_month" -> reported_month.toString)
	 if(outputMap.get("reported_month").get.toInt == 0){
	  outputMap += ("reported_cumulativeoil_bbls" -> "0")
	  } else {
	   sum_reported_cumulativeoil_bbls = sum_reported_cumulativeoil_bbls + outputMap.get("liq").get.toDouble
	    outputMap += ("reported_cumulativeoil_bbls" -> sum_reported_cumulativeoil_bbls.toString) 
	    }
	    if(outputMap.get("reported_month").get.toInt == 0){
	     outputMap += ("reported_cumulativegas_mcf" -> "0")
	     } else {
	      sum_reported_cumulativegas_mcf = sum_reported_cumulativegas_mcf + outputMap.get("gas").get.toDouble
	       outputMap += ("reported_cumulativegas_mcf" -> sum_reported_cumulativegas_mcf.toString) 
	       }
	       if(outputMap.get("reported_month").get.toInt == 0){
	        outputMap += ("reported_cumulativewtr" -> "0")
		} else {
		 sum_reported_cumulativewtr = sum_reported_cumulativewtr + outputMap.get("gas").get.toDouble
		  outputMap += ("reported_cumulativewtr" -> sum_reported_cumulativewtr.toString) 
		  }

		  outputMap += ("reported_cumulativetotal_boed" ->  (outputMap.get("reported_cumulativeoil_bbls").get.toDouble + ( outputMap.get("reported_cumulativegas_mcf").get.toDouble/6)).toString)

		  outputMap += ("reported_cumulative_oilmix" ->  (outputMap.get("reported_cumulativegas_mcf").get.toDouble /  outputMap.get("reported_cumulativetotal_boed").get.toDouble).toString)

		  outputMap += ("reported_cumulative_gor" ->  (outputMap.get("reported_cumulativegas_mcf").get.toDouble / ( outputMap.get("reported_cumulativegas_mcf").get.toDouble * 1000)).toString) 

		  outputMap += ("reported_cumulative_wtrcut" ->  (outputMap.get("reported_cumulativewtr").get.toDouble /  outputMap.get("reported_cumulativeoil_bbls").get.toDouble).toString)

		  outputMap += ("reported_lateral_adj_cumulative_oil_bbls_1000ft" ->  (outputMap.get("reported_cumulativeoil_bbls").get.toDouble /  outputMap.get("lateral_length").get.toDouble / 1000).toString)

		  outputMap += ("reported_lateral_adj_cumulative_gas_mcf_1000ft" ->  (outputMap.get("reported_cumulativegas_mcf").get.toDouble /  outputMap.get("lateral_length").get.toDouble / 1000).toString)

		  outputMap += ("reported_lateral_adj_cumulative_total_boe_1000ft" ->  (outputMap.get("reported_cumulativetotal_boed").get.toDouble /  outputMap.get("lateral_length").get.toDouble / 1000).toString)  

		  if(outputMap.get("normalized_month").get.toInt == 0){
		   outputMap += ("normalized_cumulativeoil_bbls" -> "0")
		   } else {
		    sum_normalized_cumulativeoil_bbls = sum_normalized_cumulativeoil_bbls + outputMap.get("liq").get.toDouble
		     outputMap += ("normalized_cumulativeoil_bbls" -> sum_normalized_cumulativeoil_bbls.toString) 
		     }
		     if(outputMap.get("normalized_month").get.toInt == 0){
		      outputMap += ("normalized_cumulativegas_mcf" -> "0")
		      } else {
		       sum_normalized_cumulativegas_mcf = sum_normalized_cumulativegas_mcf + outputMap.get("gas").get.toDouble
		        outputMap += ("normalized_cumulativegas_mcf" -> sum_normalized_cumulativegas_mcf.toString) 
			}
			if(outputMap.get("normalized_month").get.toInt == 0){
			 outputMap += ("normalized_cumulativewtr" -> "0")
			 } else {
			  sum_normalized_cumulativewtr = sum_normalized_cumulativewtr + outputMap.get("gas").get.toDouble
			   outputMap += ("normalized_cumulativewtr" -> sum_normalized_cumulativewtr.toString) 
			   }

			   outputMap += ("normalized_cumulativetotal_boed" ->  (outputMap.get("normalized_cumulativeoil_bbls").get.toDouble + ( outputMap.get("normalized_cumulativegas_mcf").get.toDouble/6)).toString)

			   outputMap += ("normalized_cumulative_oilmix" ->  (outputMap.get("normalized_cumulativegas_mcf").get.toDouble /  outputMap.get("normalized_cumulativetotal_boed").get.toDouble).toString)

			   outputMap += ("normalized_cumulative_gor" ->  (outputMap.get("normalized_cumulativegas_mcf").get.toDouble / ( outputMap.get("normalized_cumulativegas_mcf").get.toDouble * 1000)).toString) 

			   outputMap += ("normalized_cumulative_wtrcut" ->  (outputMap.get("normalized_cumulativewtr").get.toDouble /  outputMap.get("normalized_cumulativeoil_bbls").get.toDouble).toString)

			   outputMap += ("normalized_lateral_adj_cumulative_oil_bbls_1000ft" ->  (outputMap.get("normalized_cumulativeoil_bbls").get.toDouble /  outputMap.get("lateral_length").get.toDouble / 1000).toString)
			    
			    outputMap += ("normalized_lateral_adj_cumulative_gas_mcf_1000ft" ->  (outputMap.get("normalized_cumulativegas_mcf").get.toDouble /  outputMap.get("lateral_length").get.toDouble / 1000).toString)

			    outputMap += ("normalized_lateral_adj_cumulative_total_boe_1000ft" ->  (outputMap.get("normalized_cumulativetotal_boed").get.toDouble /  outputMap.get("lateral_length").get.toDouble / 1000).toString)  
			      
			      val values = fields.map(x => outputMap.getOrElse(x,'0'))
			      Row(values:_*)
			      }}

			      val outputDF = sqlContext.createDataFrame(rowrdd,outputSchema)
			      outputDF.saveAsTable("outputTable")
			      ;


