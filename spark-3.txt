import org.apache.spark.sql.types.StructType
import sqlContext.implicits._
import org.apache.spark.sql.Row
val outputSchema = new StructType().add("pkey","string").add("jobstartdate","string").add("jobenddate","string").add("apinumber","string").add("statenumber","string").add("countynumber","string").add("operatornumber","string").add("wellname","string").add("latitude","string").add("longitude","string").add("projection","string").add("tvd","double").add("totalbasewatervolume","double").add("totalbasenonwatervolume","double").add("statename","string").add("countyname","string").add("ffversion","double").add("federalwell","boolean").add("indianwell","boolean").add("source","string").add("dtmod","string").add("pkeyPurpose","string").add("ingredientname","string").add("CASNumber","string").add("PercentHighAssitive","float").add("percentHFjob","varchar").add("IngredientComment","float").add("ingredientMSDS","stirng").add("MassIngredient","float").add("Claimantcompany","stirng").add("PkeyDisclosure","stirng").add("Pkeyregistryupload","stirng").add("tradename","string").add("supplier","stirng").add("purpose","stirng").add("systemapproach","boolean").add("iswater","boolean").add("Proppant","stirng").add("water","stirng").add("Proppant_percent","double").add("Water_percent","double").add("Proppant_Adj","double").add("Water_Adj","double").add("Proppant_lbs","double").add("apinumber_FF","string").add("apinumber_NN","string")

val fields = outputSchema.fields.map(x => x.name)

val df = sqlContext.sql("select * from hdpi_production")
val rowrdd = df.rdd.map{y => {
val outputMap = scala.collection.mutable.HashMap.empty[String,Any]
outputMap += ("pkey" -> y.getString(0))
outputMap += ("jobstartdate" -> y.getString(1))
outputMap += ("jobenddate" -> y.getString(2))
outputMap += ("apinumber" -> y.getString(3))
outputMap += ("statenumber" -> y.getString(4))
outputMap += ("countynumber" -> y.getString(5))
outputMap += ("operatornumber" -> y.getString(6))
outputMap += ("wellname" -> y.getString(7))
outputMap += ("latitude" -> y.getString(8))
outputMap += ("longitude" -> y.getString(9))
outputMap += ("projection" -> y.getString(10))
outputMap += ("tvd" -> y.getDouble(11))
outputMap += ("totalbasewatervolume" -> y.getDouble(12))
outputMap += ("totalbasenonwatervolume" -> y.getDouble(13))
outputMap += ("statename" -> y.getString(14))
outputMap += ("countyname" -> y.getString(15))
outputMap += ("ffversion" -> y.getDouble(16))
outputMap += ("federalwell" -> y.getBoolean(17))
outputMap += ("indianwell" -> y.getBoolean(18))
outputMap += ("source" -> y.getString(19))
outputMap += ("dtmod" -> y.getString(20))
outputMap += ("pkeyPurpose" -> y.getString(21))
outputMap += ("ingredientname" -> y.getString(22))
outputMap += ("CASNumber" -> y.getString(23))
outputMap += ("PercentHighAssitive" -> y.getFloat(24))
outputMap += ("percentHFjob" -> y.getDouble(25))
outputMap += ("IngredientComment" -> y.getFloat(26))
outputMap += ("ingredientMSDS" -> y.getString(27))
outputMap += ("MassIngredient" -> y.getFloat(28))
outputMap += ("Claimantcompany" -> y.getString(29))
outputMap += ("PkeyDisclosure" -> y.getString(30))
outputMap += ("Pkeyregistryupload" -> y.getString(31))
outputMap += ("tradename" -> y.getString(32))
outputMap += ("supplier" -> y.getString(33))
outputMap += ("purpose" -> y.getString(34))
outputMap += ("systemapproach" -> y.getBoolean(35))
outputMap += ("iswater" -> y.getBoolean(36))
val ingredientname = outputMap.get("ingredientname").get.asInstanceOf[String] 
val purpose = outputMap.get("purpose").get.asInstanceOf[String] 
val percentHFjob = outputMap.get("percentHFjob").get.asInstanceOf[Double]
val totalbasewatervolume = outputMap.get("totalbasewatervolume").get.asInstanceOf[Double]


if(ingredientname.equals("Water") || ingredientname.equals("water")){
	outputMap += ("water" -> "Water")
	outputMap += ("Water_percent" -> percentHFjob)
	}else{
	outputMap += ("Water_percent" -> 0)	
	}
if(ingredientname.equals("Silica") || ingredientname.equals("silica") || purpose.equals("Proppant") || purpose.equals("proppant")){
	outputMap += ("Proppant" -> "Proppant")	
	outputMap += ("Proppant_percent" -> percentHFjob)
	}else{
	outputMap += ("Proppant_percent" -> 0)	
	}
val Proppant_percent = outputMap.get("Proppant_percent").get.asInstanceOf[Double]
val Water_percent = outputMap.get("Water_percent").get.asInstanceOf[Double]

if(Proppant_percent == 0 || Proppant_percent > 30 ){
	if(Water_percent>70){
		outputMap += ("Proppant_Adj" -> 100-Water_percent)		
	}else{
		outputMap += ("Proppant_Adj" -> 0)	
	}

}else{
	outputMap += ("Proppant_Adj" -> Proppant_percent)	
}

if(Water_percent == 0 || Water_percent < 70 ){
	if(Proppant_percent<30 && Proppant_percent>0){
		outputMap += ("Water_Adj" -> 100-Proppant_percent)		
	}else{
		outputMap += ("Water_Adj" -> 0)	
	}

}else{
	outputMap += ("Water_Adj" -> Water_percent)	
}

val Proppant_Adj = outputMap.get("Proppant_Adj").get.asInstanceOf[Double]
val Water_Adj = outputMap.get("Water_Adj").get.asInstanceOf[Double]

if((totalbasewatervolume/Water_Adj) * Proppant_Adj * 8.35 > 50000000 || (totalbasewatervolume/Water_Adj) * Proppant_Adj * 8.35 < 0  ){
outputMap += ("Proppant_lbs" -> 60000000)
}else{
outputMap += ("Proppant_lbs" -> (totalbasewatervolume/Water_Adj) * Proppant_Adj * 8.35)
}

val apinumber = outputMap.get("apinumber").get.asInstanceOf[String]
val apinumberLength = apinumber.length()

if(apinumberLength == 10 ){
outputMap += ("apinumber_FF" -> apinumber + "0000")
}else if(apinumberLength == 11 ){
outputMap += ("apinumber_FF" -> apinumber + "000")
}else if(apinumberLength == 12 ){
outputMap += ("apinumber_FF" -> apinumber + "00")
}else if(apinumberLength == 13 ){
outputMap += ("apinumber_FF" -> apinumber + "0")
}

if(apinumberLength == 2 ){
outputMap += ("apinumber_NN" -> apinumber + "-")
}else if(apinumberLength == 5 ){
outputMap += ("apinumber_NN" -> apinumber + "-")
}else if(apinumberLength == 10 ){
outputMap += ("apinumber_NN" -> apinumber + "-")
}else if(apinumberLength == 12 ){
outputMap += ("apinumber_NN" -> apinumber + "-")
}			      
val values = fields.map(x => outputMap.getOrElse(x,None))
Row(values:_*)
}}

val outputDF = sqlContext.createDataFrame(rowrdd,outputSchema)
outputDF.saveAsTable("outputTable")


