    val state_zip = sc.textFile("statezipfilepath").map(x => x.split(",")).map(x => (x(1),(x(0),x(3))))
	
	// Parse the station file and emit the output pair rdd with id as key and rest of cols as value
    val stationPairRDD = stationRDD.map { x => {

      (x.substring(38,40),(x.substring(0, 11), (x.substring(12, 20),x.substring(21, 30),x.substring(38,40))))
    }
    }.join(state_zip).map(x => (x._2._1._1,(x._2._1._2,x._2._1._3,x._2._1._4,x._2._2._1,x._2._2._2)))

    // Parse the DLY file and emit the output pair rdd with id as key and rest of cols as value
    val inputDLYPairRDD = inputDLYRDD.map { x => {
      val id = x.substring(0, 11)
      val year = x.substring(11, 15)
      val month = x.substring(15, 17)
      val element = x.substring(17, 21)
      val values = 0 to 30 map { i => x.substring(8 * i + 22, 8 * i + 27) }
      (id, (year, month, element, values))
    }

    }
    // joining both rdd
    val joined = stationPairRDD.join(inputDLYPairRDD)
    // Creating pair id with (id,year,month,latitude,longitude) as Key and (Element Name , list of values for each date) as Value
    val pairrdd = joined.map(x => ((x._1, x._2._2._1, x._2._2._2, x._2._1._1, x._2._1._2,x._2._1._3,x._2._1._4,x._2._1._5), (x._2._2._3, x._2._2._4)))
    // Grouping to get all the element values per id,year,month,latitude,longitude
    val grouped = pairrdd.groupByKey()

    val flatted_value = grouped.flatMap {
      x => {
        // Defining values Map which will have Element name as Key and list of values for a particular month as value
        val valuesMap = scala.collection.mutable.Map[String, IndexedSeq[String]]()
        x._2.foreach(y => valuesMap += (y._1 -> y._2))
        import java.util.Calendar
        import java.util.GregorianCalendar
        val weekMap = Map(1 -> Calendar.JANUARY,2 -> Calendar.FEBRUARY,3 -> Calendar.MARCH,
          4 -> Calendar.APRIL,5 -> Calendar.MAY,6 -> Calendar.JUNE,7 -> Calendar.JULY,8 -> Calendar.AUGUST,
          9 -> Calendar.SEPTEMBER,10 -> Calendar.OCTOBER,11 -> Calendar.NOVEMBER,12 -> Calendar.DECEMBER)
        val mycal = new GregorianCalendar(x._1._2.toInt, weekMap.getOrElse(x._1._3.toInt,Calendar.JANUARY), 1)
        val daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH)

        // Looping from 1 to 31 which will act as dates in the output
        1 to daysInMonth map { y =>
          // Creating the output row String
          (
            // Adding ID
            x._1._1.concat(",")
              // Forming date and adding to output row string
              .concat(x._1._2.concat("-").concat(x._1._3).concat("-").concat("%02d".format(y)))
              // Adding Latitude
            .concat(",").concat(x._1._4)
              // Adding Longitude
            .concat(",").concat(x._1._5)
            // Adding State
              .concat(",").concat(x._1._6)
              // Adding city
              .concat(",").concat(x._1._8)
              // Adding ZIP
              .concat(",").concat(x._1._7)
            // Calling getTempratures method to get TMAX in celcius and fahrenheit for the particular day
            .concat(",").concat(getTemperatures("TMAX",valuesMap,y-1))
            // Calling getTempratures method to get TMIN in celcius and fahrenheit
            .concat(",").concat(getTemperatures("TMIN",valuesMap,y-1))
            // Calling all the values for all elements except TMAX and TMIN
            .concat(",").concat(elementValues.map(z => getValue(z,valuesMap,y-1)).mkString(",")))
        }
      }
    }
